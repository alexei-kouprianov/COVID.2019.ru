xlab="", 
ylab=paste("Total COVID-2019 cases per 100K, as of",covid.2019.ru.i$TIMESTAMP[length(covid.2019.ru.i$TIMESTAMP)]), 
main="Russian Federation",
las=2)
dev.off()
# Map total cases;
png("../plots/COVID.2019.map.regions.png", height=750, width=1000, res=120, pointsize=10)
map(region="Russia", fill=TRUE, col=8) 
mtext(paste("Total COVID-2019 cases, as of",covid.2019.ru.i$TIMESTAMP[length(covid.2019.ru.i$TIMESTAMP)]), 
side=1, line=2) 
mtext("Russian Federation", font=2, cex=1.2, side=3, line=3)
points(
covid.2019.ru.i.reg.0.df$LON, 
covid.2019.ru.i.reg.0.df$LAT, 
cex=sqrt(covid.2019.ru.i.reg.0.df$NUMBER)/4, 
pch=21, bg=2
)
dev.off()
# Map total cases per 100K;
png("../plots/COVID.2019.map.regions.per_100K.png", height=750, width=1000, res=120, pointsize=10)
map(region="Russia", fill=TRUE, col=8) 
mtext(paste("Total COVID-2019 cases per 100K, as of",covid.2019.ru.i$TIMESTAMP[length(covid.2019.ru.i$TIMESTAMP)]), 
side=1, line=2) 
mtext("Russian Federation", font=2, cex=1.2, side=3, line=3)
points(
covid.2019.ru.i.reg.0.df$LON, 
covid.2019.ru.i.reg.0.df$LAT, 
cex=sqrt(covid.2019.ru.i.reg.0.df$PER.100K), 
pch=21, bg=2
)
dev.off()
ls()
covid.2019.ru.i.dyn.tt
20000 * 50000
1e+09
1 000 000 000
1000000000
20000 * 30000
1/727.72
5391/(146745098/1000000)
5391/(146745098/100000)
3/8
7/8
375/5
for(i in 1:length(covid.2019.ru.i.cumul_ts)){
if(i < 10){
png(file=paste("../plots/map.animated/COVID.2019.map.regions.00",i,".png", sep=""), height=750, width=1000, res=120, pointsize=10)
}else if(i < 100){
png(file=paste("../plots/map.animated/COVID.2019.map.regions.0",i,".png", sep=""), height=750, width=1000, res=120, pointsize=10)
}else{
png(file=paste("../plots/map.animated/COVID.2019.map.regions.",i,".png", sep=""), height=750, width=1000, res=120, pointsize=10)
}
map(region="Russia", fill=TRUE, col=8) 
mtext(paste("Total COVID-2019 cases, as of",covid.2019.breaks$TIMESTAMP[i]), 
side=1, line=2, cex=2) 
mtext("Russian Federation", font=2, cex=2, side=3, line=3)
points(covid.2019.coord$LON, covid.2019.coord$LAT, cex=sqrt(as.data.frame(table(covid.2019.ru.i.cumul_ts[[i]]$LOCUS.0))$Freq)/2, pch=21, bg=2)
dev.off()
}
length(covid.2019.ru.i.cumul_ts)
for(i in 1:length(covid.2019.ru.i.cumul_ts)){
if(i < 10){
png(file=paste("../plots/map.animated/COVID.2019.map.regions.00",i,".png", sep=""), height=750, width=1000, res=120, pointsize=10)
}else if(i < 100){
png(file=paste("../plots/map.animated/COVID.2019.map.regions.0",i,".png", sep=""), height=750, width=1000, res=120, pointsize=10)
}else{
png(file=paste("../plots/map.animated/COVID.2019.map.regions.",i,".png", sep=""), height=750, width=1000, res=120, pointsize=10)
}
map(region="Russia", fill=TRUE, col=8) 
mtext(paste("Total COVID-2019 cases, as of",covid.2019.breaks$TIMESTAMP[i]), 
side=1, line=2, cex=2) 
mtext("Russian Federation", font=2, cex=2, side=3, line=3)
points(covid.2019.coord$LON, covid.2019.coord$LAT, cex=sqrt(log(as.data.frame(table(covid.2019.ru.i.cumul_ts[[i]]$LOCUS.0))$Freq+1)), pch=21, bg=2)
dev.off()
}
8*16
map(region="Russia", fill=TRUE, col=8) 
+ mtext(paste("Total COVID-2019 cases, as of",covid.2019.breaks$TIMESTAMP[i]), 
+ side=1, line=2, cex=2) 
+ mtext("Russian Federation", font=2, cex=2, side=3, line=3)
+ 
+ points(covid.2019.coord$LON, covid.2019.coord$LAT, cex=sqrt(log(as.data.frame(table(covid.2019.ru.i.cumul_ts[[i]]$LOCUS.0))$Freq+1)), pch=21, bg=2)
################################################################
# Reading data
covid.2019.ru <- read.table("../data/momentary.txt", h=TRUE, sep="\t")
covid.2019.breaks <- read.table("../misc/breaks.txt", h=TRUE, sep="\t")
covid.2019.coord <- read.table("../misc/coord.txt", h=TRUE, sep="\t")
covid.2019.population <- read.table("../misc/population.txt", h=TRUE, sep="\t")
# cc.logo <- readPNG("../misc/240px-Cc.logo.circle.svg.png")
# cc_by.logo <- readPNG("../misc/Cc-by_new.svg.png")
################################################################
# Disaggregating
covid.2019.ru.da <- NULL
for(i in 1:nrow(covid.2019.ru)){
for(j in 1:covid.2019.ru[i,]$NUMBER){
covid.2019.ru.da <- rbind.data.frame(covid.2019.ru.da, covid.2019.ru[i,])
}
}
################################################################
# Trimming timestamps
covid.2019.ru$TIME <- strptime(covid.2019.ru$TIMESTAMP, "%Y-%m-%d %H:%M:%S")
covid.2019.ru.da$TIME <- strptime(covid.2019.ru.da$TIMESTAMP, "%Y-%m-%d %H:%M:%S")
covid.2019.breaks$TIME <- strptime(covid.2019.breaks$TIMESTAMP, "%Y-%m-%d %H:%M:%S")
################################################################
# Subsetting
# The quick from the dead
covid.2019.ru.i <- droplevels(subset(covid.2019.ru, covid.2019.ru$EVENT == "detected"))
covid.2019.ru.h <- subset(covid.2019.ru, covid.2019.ru$EVENT == "healed")
covid.2019.ru.da.i <- droplevels(subset(covid.2019.ru.da, covid.2019.ru.da$EVENT == "detected"))
covid.2019.ru.da.h <- subset(covid.2019.ru.da, covid.2019.ru.da$EVENT == "healed")
################################################################
# Data transformations
# Timeseries list;
covid.2019.ru.i.ts <- NULL
for(i in 1:length(levels(covid.2019.ru.i$TIMESTAMP))){
covid.2019.ru.i.ts[[i]] <- subset(covid.2019.ru.i, covid.2019.ru.i$TIMESTAMP == levels(covid.2019.ru.i$TIMESTAMP)[i])
}
# Noncumulated true time timeseries list;
covid.2019.ru.i.moment_ts <- NULL
for(i in 1:length(covid.2019.breaks$TIME)){
covid.2019.ru.i.moment_ts[[i]] <- subset(covid.2019.ru.da.i, 
covid.2019.ru.da.i$TIME < covid.2019.breaks$TIME[i] &
covid.2019.ru.da.i$TIME > covid.2019.breaks$TIME[i-1])
}
# Cumulated true time timeseries list for a map;
covid.2019.ru.i.cumul_ts <- NULL
for(i in 1:length(covid.2019.breaks$TIME)){
covid.2019.ru.i.cumul_ts[[i]] <- subset(covid.2019.ru.da.i, covid.2019.ru.da.i$TIME < covid.2019.breaks$TIME[i])
}
# Barplot regions list;
covid.2019.ru.i.reg <- NULL
for(i in 1:length(levels(covid.2019.ru.i$LOCUS))){
covid.2019.ru.i.reg[[i]] <- subset(covid.2019.ru.i, covid.2019.ru.i$LOCUS == levels(covid.2019.ru.i$LOCUS)[i])
}
# Mapping regions list;
covid.2019.ru.i.reg.0 <- NULL
for(i in 1:length(levels(covid.2019.ru.i$LOCUS.0))){
covid.2019.ru.i.reg.0[[i]] <- subset(covid.2019.ru.i, covid.2019.ru.i$LOCUS.0 == levels(covid.2019.ru.i$LOCUS.0)[i])
}
# Dynamics data frame;
covid.2019.ru.i.dyn <- NULL
for(i in 1:length(levels(covid.2019.ru.i$TIMESTAMP))){
covid.2019.ru.i.dyn <- rbind.data.frame(covid.2019.ru.i.dyn,
cbind.data.frame(
covid.2019.ru.i.ts[[i]]$TIME[1],
sum(covid.2019.ru.i.ts[[i]]$NUMBER))
)
}
colnames(covid.2019.ru.i.dyn) <- c("TIME","NUMBER")
covid.2019.ru.i.dyn$CUMSUM <- cumsum(covid.2019.ru.i.dyn$NUMBER)
# Barplot regions data frame;
covid.2019.ru.i.reg.df <- NULL
for(i in 1:length(levels(covid.2019.ru.i$LOCUS))){
covid.2019.ru.i.reg.df <- rbind.data.frame(covid.2019.ru.i.reg.df,
cbind.data.frame(covid.2019.ru.i.reg[[i]]$LOCUS[1],
sum(covid.2019.ru.i.reg[[i]]$NUMBER))
)
}
colnames(covid.2019.ru.i.reg.df) <- c("LOCUS.1","NUMBER")
covid.2019.ru.i.reg.df <- cbind.data.frame(covid.2019.ru.i.reg.df, covid.2019.population)
covid.2019.ru.i.reg.df$PER.100K <- covid.2019.ru.i.reg.df$NUMBER/(covid.2019.ru.i.reg.df$POPULATION/100000)
covid.2019.ru.i.reg.ordered.df <- covid.2019.ru.i.reg.df[order(-covid.2019.ru.i.reg.df$NUMBER),]
covid.2019.ru.i.reg.ordered.PER.100K.df <- covid.2019.ru.i.reg.df[order(-covid.2019.ru.i.reg.df$PER.100K),]
# Mapping regions data frame;
covid.2019.ru.i.reg.0.df <- NULL
for(i in 1:length(levels(covid.2019.ru.i$LOCUS.0))){
covid.2019.ru.i.reg.0.df <- rbind.data.frame(covid.2019.ru.i.reg.0.df,
cbind.data.frame(covid.2019.ru.i.reg.0[[i]]$LOCUS.0[1],
sum(covid.2019.ru.i.reg.0[[i]]$NUMBER))
)
}
colnames(covid.2019.ru.i.reg.0.df) <- c("LOCUS.1","NUMBER")
covid.2019.ru.i.reg.0.df <- cbind.data.frame(covid.2019.ru.i.reg.0.df, covid.2019.coord)
covid.2019.ru.i.reg.0.df <- covid.2019.ru.i.reg.0.df[order(-covid.2019.ru.i.reg.0.df$NUMBER),]
covid.2019.ru.i.reg.0.df$PER.100K <- covid.2019.ru.i.reg.0.df$NUMBER/(covid.2019.ru.i.reg.0.df$POPULATION/100000)
# Momentary data
RUS <- NULL
for(i in 1:length(covid.2019.ru.i.moment_ts)){
RUS <- c(RUS, nrow(covid.2019.ru.i.moment_ts[[i]]))
}
# Singling out Moscow and St. Petersburg
Mos <- NULL
for(i in 1:length(covid.2019.ru.i.moment_ts)){
Mos <- c(Mos, nrow(subset(covid.2019.ru.i.moment_ts[[i]], covid.2019.ru.i.moment_ts[[i]]$LOCUS.0 == "Moscow")))
}
SPb <- NULL
for(i in 1:length(covid.2019.ru.i.moment_ts)){
SPb <- c(SPb, nrow(subset(covid.2019.ru.i.moment_ts[[i]], covid.2019.ru.i.moment_ts[[i]]$LOCUS.0 == "St. Petersburg")))
}
covid.2019.ru.i.dyn.tt <- cbind.data.frame(
  covid.2019.breaks$TIME,
  RUS,
  Mos,
  SPb
)
colnames(covid.2019.ru.i.dyn.tt) <- c("TIME","RUS","Mos","SPb")
covid.2019.ru.i.dyn.tt$RUS.CS <- cumsum(covid.2019.ru.i.dyn.tt$RUS)
covid.2019.ru.i.dyn.tt$Mos.CS <- cumsum(covid.2019.ru.i.dyn.tt$Mos)
covid.2019.ru.i.dyn.tt$SPb.CS <- cumsum(covid.2019.ru.i.dyn.tt$SPb)
################################################################
# Basic plots
# Cumulated growth;
png("../plots/COVID.2019.cumulated.png", height=750, width=1000, res=120, pointsize=10)
par(mar=c(6,5,4,2)+.1)
plot(covid.2019.ru.i.dyn$TIME, covid.2019.ru.i.dyn$CUMSUM, type="l",
ylim=c(0, max(covid.2019.ru.i.dyn$CUMSUM)),
xlab="", 
ylab="Total COVID-2019 cases detected", 
main="Russian Federation",
axes=FALSE)
points(covid.2019.ru.i.dyn$TIME, covid.2019.ru.i.dyn$NUMBER, type="h", col=2, lwd=3)
axis.POSIXct(1, 
at=seq(min(covid.2019.breaks$TIME), max(covid.2019.breaks$TIME), by="week"), 
format = "%Y-%m-%d", 
las=2)
axis(2)
dev.off()
# Cumulated growth, by regions;
png("../plots/COVID.2019.cumulated.by_regions.png", height=750, width=1000, res=120, pointsize=10)
par(mar=c(6,5,4,2)+.1)
plot(covid.2019.ru.i.dyn.tt$TIME, covid.2019.ru.i.dyn.tt$Mos.CS, 
type="l", col=2, xlab="", 
ylab="Total COVID-2019 cases detected", 
main="Russian Federation",
axes=FALSE)
points(covid.2019.ru.i.dyn.tt$TIME, covid.2019.ru.i.dyn.tt$SPb.CS, type="l",col=4)
points(covid.2019.ru.i.dyn.tt$TIME, (covid.2019.ru.i.dyn.tt$RUS.CS - (covid.2019.ru.i.dyn.tt$Mos.CS + covid.2019.ru.i.dyn.tt$SPb.CS)), type="l",col=3)
legend("topleft", lt=1, col=c(2,4,3), legend=c("Moscow","St. Petersburg","The rest of Russia"), bty="n")
axis.POSIXct(1, 
at=seq(min(covid.2019.breaks$TIME), max(covid.2019.breaks$TIME), by="week"), 
format = "%Y-%m-%d", 
las=2)
axis(2)
dev.off()
# Cumulated growth, log scale;
png("../plots/COVID.2019.cumulated.log10.png", height=750, width=1000, res=120, pointsize=10)
par(mar=c(6,5,4,2)+.1)
plot(covid.2019.ru.i.dyn$TIME, log10(covid.2019.ru.i.dyn$CUMSUM), type="l",
ylim=c(0, max(log10(covid.2019.ru.i.dyn$CUMSUM))),
xlab="", 
ylab="Total COVID-2019 cases detected (logarithmic scale)", 
main="Russian Federation",
axes=FALSE)
points(covid.2019.ru.i.dyn$TIME, log10(covid.2019.ru.i.dyn$NUMBER), type="h", col=2, lwd=3)
axis.POSIXct(1, 
at=seq(min(covid.2019.breaks$TIME), max(covid.2019.breaks$TIME), by="week"), 
format = "%Y-%m-%d", 
las=2)
axis(2, at=log10(c(1,10,100,1000)), labels=c(1,10,100,1000))
axis(2, at=log10(c(1:9, seq(10,100,10), seq(200,1000,100), seq(2000,10000,1000))), labels=FALSE)
dev.off()
# Cumulated growth, log scale, by regions;
png("../plots/COVID.2019.cumulated.log.10.by_regions.png", height=750, width=1000, res=120, pointsize=10)
par(mar=c(6,5,4,2)+.1)
plot(covid.2019.ru.i.dyn.tt$TIME, log10(covid.2019.ru.i.dyn.tt$Mos.CS), 
type="l", col=2, 
xlab="", 
ylab="Total COVID-2019 cases detected (logarithmic scale)", 
main="Russian Federation",
axes=FALSE)
points(covid.2019.ru.i.dyn.tt$TIME, log10(covid.2019.ru.i.dyn.tt$SPb.CS), type="l",col=4)
points(covid.2019.ru.i.dyn.tt$TIME, log10(covid.2019.ru.i.dyn.tt$RUS.CS - (covid.2019.ru.i.dyn.tt$Mos.CS + covid.2019.ru.i.dyn.tt$SPb.CS)), type="l",col=3)
# rasterImage(cc.logo, 
# xleft = covid.2019.ru.i.dyn.tt$TIME[1], 
# xright=covid.2019.ru.i.dyn.tt$TIME[1]+dim(cc.logo)[2]*1200, 
# ytop = log10(100), 
# ybottom=log10(100)-dim(cc.logo)[1]/1600)
axis.POSIXct(1, 
at=seq(min(covid.2019.breaks$TIME), max(covid.2019.breaks$TIME), by="week"), 
format = "%Y-%m-%d", 
las=2)
axis(2, at=log10(c(1,10,100,1000)), labels=c(1,10,100,1000))
axis(2, at=log10(c(1:9, seq(10,100,10), seq(200,1000,100), seq(2000,10000,1000))), labels=FALSE)
legend("topleft", lt=1, col=c(2,4,3), legend=c("Moscow","St. Petersburg","The rest of Russia"), bty="n")
dev.off()
# Regions barplot;
png("../plots/COVID.2019.barplot.regions.png", height=750, width=1000, res=120, pointsize=10)
par(mar=c(10,5,4,2)+.1, cex.axis=.6)
barplot(covid.2019.ru.i.reg.ordered.df$NUMBER, 
names.arg=covid.2019.ru.i.reg.ordered.df$LOCUS, 
xlab="", 
ylab=paste("Total COVID-2019 cases, as of",covid.2019.ru.i$TIMESTAMP[length(covid.2019.ru.i$TIMESTAMP)]), 
main="Russian Federation",
las=2)
dev.off()
# Regions barplot logarithmic;
png("../plots/COVID.2019.barplot.regions.log.10.png", height=750, width=1000, res=120, pointsize=10)
par(mar=c(10,5,4,2)+.1, cex.axis=.6)
barplot(log10(covid.2019.ru.i.reg.ordered.df$NUMBER), 
names.arg=covid.2019.ru.i.reg.ordered.df$LOCUS, 
xlab="", 
ylab=paste("Total COVID-2019 cases, as of",covid.2019.ru.i$TIMESTAMP[length(covid.2019.ru.i$TIMESTAMP)],"(logarithmic scale)"), 
main="Russian Federation",
las=2, axes=FALSE)
axis(2, at=log10(c(1,10,100,1000)), labels=c(1,10,100,1000))
axis(2, at=log10(c(1:9, seq(10,100,10), seq(200,1000,100), seq(2000,10000,1000))), labels=FALSE)
dev.off()
# Regions barplot cases per 100K;
png("../plots/COVID.2019.barplot.regions.per_100K.png", height=750, width=1000, res=120, pointsize=10)
par(mar=c(10,5,4,2)+.1, cex.axis=.6)
barplot(covid.2019.ru.i.reg.ordered.PER.100K.df$PER.100K, 
names.arg=covid.2019.ru.i.reg.ordered.PER.100K.df$LOCUS, 
xlab="", 
ylab=paste("Total COVID-2019 cases per 100K, as of",covid.2019.ru.i$TIMESTAMP[length(covid.2019.ru.i$TIMESTAMP)]), 
main="Russian Federation",
las=2)
dev.off()
# Map total cases;
png("../plots/COVID.2019.map.regions.png", height=750, width=1000, res=120, pointsize=10)
map(region="Russia", fill=TRUE, col=8) 
mtext(paste("Total COVID-2019 cases, as of",covid.2019.ru.i$TIMESTAMP[length(covid.2019.ru.i$TIMESTAMP)]), 
side=1, line=2) 
mtext("Russian Federation", font=2, cex=1.2, side=3, line=3)
points(
covid.2019.ru.i.reg.0.df$LON, 
covid.2019.ru.i.reg.0.df$LAT, 
cex=sqrt(covid.2019.ru.i.reg.0.df$NUMBER)/4, 
pch=21, bg=2
)
dev.off()
# Map total cases per 100K;
png("../plots/COVID.2019.map.regions.per_100K.png", height=750, width=1000, res=120, pointsize=10)
map(region="Russia", fill=TRUE, col=8) 
mtext(paste("Total COVID-2019 cases per 100K, as of",covid.2019.ru.i$TIMESTAMP[length(covid.2019.ru.i$TIMESTAMP)]), 
side=1, line=2) 
mtext("Russian Federation", font=2, cex=1.2, side=3, line=3)
points(
covid.2019.ru.i.reg.0.df$LON, 
covid.2019.ru.i.reg.0.df$LAT, 
cex=sqrt(covid.2019.ru.i.reg.0.df$PER.100K), 
pch=21, bg=2
)
dev.off()
covid.2019.ru.i.reg.df
ls()
covid.2019.ru.i.dyn.tt
curves(exp(x),from=0, to=10)
curve(exp(x),from=0, to=10)
curve(exp(x),from=0, to=100)
curve(exp(x),from=0, to=1000)
dev.off()
curve(exp(x),from=0, to=10)
curve(exp(x),from=0, to=100)
curve(exp(x),from=0, to=1000)
curve(exp(x),from=0, to=1)
curve(exp(x),from=0, to=10)
curve(exp(x),from=0, to=10)
curve(exp(x/2),from=0, to=10, add=TRUE)
curve(exp(x/1.5),from=0, to=10, add=TRUE)
curve(exp(x/1.25),from=0, to=10, add=TRUE)
curve(exp(x/1.125),from=0, to=10, add=TRUE)
curve(exp(x/1.0625),from=0, to=10, add=TRUE)
curve(exp(x*1.0625),from=0, to=10, add=TRUE)
curve(exp(x*1.125),from=0, to=10, add=TRUE)
curve(exp(x*1.25),from=0, to=10, add=TRUE)
curve(exp(x*1.5),from=0, to=10, add=TRUE)
curve(exp(x*2),from=0, to=10, add=TRUE)
curve(exp(x),from=0, to=10, col="red")
curve(exp(x/2),from=0, to=10, add=TRUE)
curve(exp(x/1.5),from=0, to=10, add=TRUE)
curve(exp(x/1.25),from=0, to=10, add=TRUE)
curve(exp(x/1.125),from=0, to=10, add=TRUE)
curve(exp(x*1.0625),from=0, to=10, add=TRUE)
curve(exp(x/1.0625),from=0, to=10, add=TRUE)
curve(exp(x*1.125),from=0, to=10, add=TRUE)
curve(exp(x*1.25),from=0, to=10, add=TRUE)
curve(exp(x*1.5),from=0, to=10, add=TRUE)
curve(exp(x*2),from=0, to=10, add=TRUE)
curve(exp(x*4),from=0, to=10, add=TRUE)
curve(exp(x*8),from=0, to=10, add=TRUE)
curve(exp(x*16),from=0, to=10, add=TRUE)
1/16
install.packages(" fitdistrplus
")
install.packages("fitdistrplus")
ls()
library("fitdistrplus")
help(fitdist)
help(fitdist)
exp.fit.mle <- fitdist(covid.2019.ru.i.dyn$NUMBER, "exp", method="mle")
exp.fit.qme <- fitdist(covid.2019.ru.i.dyn$NUMBER, "exp", method="qme")
exp.fit.mge <- fitdist(covid.2019.ru.i.dyn$NUMBER, "exp", method="mge")
plot(exp.fit.mle)
covid.2019.ru.i.dyn
exp.fit.mle <- fitdist(covid.2019.ru.i.dyn$CUMSUM, "exp", method="mle")
exp.fit.mle <- fitdist(covid.2019.ru.i.dyn$CUMSUM, ddistname="exp", method="mle")
exp.fit.mle <- fitdist(covid.2019.ru.i.dyn$CUMSUM, distr="exp", method="mle")
exp.fit.mle <- fitdist(covid.2019.ru.i.dyn$CUMSUM, distr="exp", method="mge")
exp.fit.mge <- fitdist(covid.2019.ru.i.dyn$CUMSUM, distr="exp", method="mge")
plot(exp.fit.mge)
exp(50, 1)
rexp(50, 1)
plot(rexp(50, 1))
exp.fit.mle <- fitdist(covid.2019.ru.i.dyn$CUMSUM, distr="exponential", method="mle")
exp.fit.mle <- fitdist(covid.2019.ru.i.dyn$CUMSUM, distr="exp", method="mle")
options(digits = 3)
op <- options(digits = 3)
op
set.seed(123)
x <- rgamma(100, shape = 5, rate = 0.1)
fitdistr(x, "gamma")
covid.2019.ru.i.reg.ordered.df
data("endosulfan", package = "fitdistrplus")
my_data <- endosulfan$ATV
dev.off()
plot(endosulfan$ATV
)
plot(endosulfan$ATV, type="l")
endosulfan$ATV
42526/22*16-44+265*7
42526/22
42526/22*16
42526/22*16-44
265*7
33132/11+14530-12303/9
33132/11
12303/9
42378/21*27/54*40+45615
42378/21
42378/21*27
36103/79*21*9-(9068-507)
13*60
4*60+35
(4*60+35)*60
90*60
28*60+57
42526/22*16-44+265*7
42526/22*16-44+265*37
265
265*37
42526/22*16
42526/22*16-44
42526/22*16-44+265*37
x <- rexp(50) fite <- fitdist(x, "exp") llplot(fite)
x <- rexp(50)
x
help(rexp)
fite <- fitdist(x, "exp")
plot(fite)
9*60
help(nls)
colnames(covid.2019.ru.i.dyn)
mod <- nls(covid.2019.ru.i.dyn$NUMBER ~ exp(a + b * covid.2019.ru.i.dyn$TIME), data = temp, start = list(a = 0, b = 0))
mod <- nls(covid.2019.ru.i.dyn$NUMBER ~ exp(a + b * covid.2019.ru.i.dyn$TIME), start = list(a = 0, b = 0))
mod <- nls(covid.2019.ru.i.dyn.tt$CUMSUM ~ exp(a + b * covid.2019.ru.i.dyn.tt$TIME), start = list(a = 0, b = 0))
covid.2019.ru.i.dyn.tt
mod <- nls(covid.2019.ru.i.dyn.tt$RUS.CS ~ exp(a + b * covid.2019.ru.i.dyn.tt$TIME), start = list(a = 0, b = 0))
mod <- nls(covid.2019.ru.i.dyn.tt$RUS.CS ~ exp(a + b * covid.2019.ru.i.dyn.tt$TIME), data=covid.2019.ru.i.dyn.tt, start = list(a = 0, b = 0))
mod <- nls(covid.2019.ru.i.dyn.tt$RUS.CS ~ exp(a + b * 1:nrow(covid.2019.ru.i.dyn.tt)), data=covid.2019.ru.i.dyn.tt, start = list(a = 0, b = 0))
covid.2019.ru.i.dyn.tt
covid.2019.ru.i.dyn.tt$DAY.COUNT <- rownames(covid.2019.ru.i.dyn.tt
)
covid.2019.ru.i.dyn.tt
mod <- nls(covid.2019.ru.i.dyn.tt$RUS.CS ~ exp(a + b * covid.2019.ru.i.dyn.tt$DAY.COUNT)), data=covid.2019.ru.i.dyn.tt, start = list(a = 0, b = 0))
mod <- nls(covid.2019.ru.i.dyn.tt$RUS.CS ~ exp(a + b * covid.2019.ru.i.dyn.tt$DAY.COUNT), data=covid.2019.ru.i.dyn.tt, start = list(a = 0, b = 0))
summary(covid.2019.ru.i.dyn.tt)
covid.2019.ru.i.dyn.tt$DAY.COUNT <- as.numeric(covid.2019.ru.i.dyn.tt$DAY.COUNT)
summary(covid.2019.ru.i.dyn.tt)
mod <- nls(covid.2019.ru.i.dyn.tt$RUS.CS ~ exp(a + b * covid.2019.ru.i.dyn.tt$DAY.COUNT), data=covid.2019.ru.i.dyn.tt, start = list(a = 0, b = 0))
mod <- nls(covid.2019.ru.i.dyn.tt$RUS.CS[33:68] ~ exp(a + b * covid.2019.ru.i.dyn.tt$DAY.COUNT[33:68]), data=covid.2019.ru.i.dyn.tt, start = list(a = 0, b = 0))
mod <- nls(covid.2019.ru.i.dyn.tt$RUS.CS[33:68] ~ exp(a + b * covid.2019.ru.i.dyn.tt$DAY.COUNT[33:68]), data=covid.2019.ru.i.dyn.tt[33:68,], start = list(a = 0, b = 0))
test <- covid.2019.ru.i.dyn.tt[33:68,]
mod <- nls(RUS.CS ~ exp(a + b * DAY.COUNT), data=test, start = list(a = 0, b = 0))
test
test$DAY.COUNT <- test$DAY.COUNT-32
mod <- nls(RUS.CS ~ exp(a + b * DAY.COUNT), data=test, start = list(a = 0, b = 0))
install.packages("drc","nlme","aomisc")
install.packages("drc","nlme","aomisc")
install.packages("drc")
install.packages("nlme")
install.packages("aomisc")
install.packages("aomisc")
install.packages("aomisc")
install.packages("aomisc")
library("drc","nlme")
library(nlme)
model <- drm(covid.2019.ru.i.dyn$RUS.CS ~ covid.2019.ru.i.dyn$TIME, fct = DRC.expoDecay(),)
model <- drm(covid.2019.ru.i.dyn$RUS.CS ~ covid.2019.ru.i.dyn$TIME, fct = DRC.expoDecay())
install.packages("aomisc")
library(aomisc)
install.packages("aomisc")
library(aomisc)
install.packages("remotes")
remotes::install_github("OnofriAndreaPG/aomisc")
library(aomisc)
model <- drm(covid.2019.ru.i.dyn$RUS.CS ~ covid.2019.ru.i.dyn$TIME, fct = DRC.expoDecay())
model <- drm(covid.2019.ru.i.dyn$RUS.CS ~ covid.2019.ru.i.dyn$TIME, fct = DRC.expoDecay())
library(aomisc)
detach("package:car", unload=TRUE)
detach("package:drc", unload=TRUE)
library(aomisc)
detach("package:car", unload=TRUE)
detach("package:car", unload=TRUE, character.only=TRUE)
unloadNamespace("car")
unloadNamespace("drc")
unloadNamespace("car")
library(aomisc)
install.package("car")
install.packages("car")
library(aomisc)
install.packages("drc")
installed.packages()
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
uninstall.packages("car")
remove.packages("car")
library(aomisc)
install.packages("car")
library(aomisc)
q()
